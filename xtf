#!/bin/bash
POSIXLY_CORRECT=yes
arg_count=$#

# Remove before submit
#echo "$arg_count"
function unqote()
{
  echo "$1"
  return echo "$1" | tr -d '"' | tr -d "'"
}
read_file() {
  local file_name="$1"
  # Check if file exists
  if [[ ! -f "$file_name" ]]; then
    #exit 1
    return 1
  fi
  local file_type="$(file -b "$file_name")"

  # Check if file is gzipped
  if [[ "$file_type" == *"gzip compressed"* ]]; then
    # Use gunzip to decompress and read the file
    echo "$(gunzip -c "$file_name")"
  else
    # Use cat to print the content of the uncompressed file
    echo "$(cat "$file_name")"
  fi
}
read_multiple_files(){
  for i in $(seq 1 $arg_count);do
    if [[ -f "${!i}" ]]; then
      local out=$(read_file "${!i}")
     echo "$out"
    fi
  done
}


  is_next_currency="false"
  curr_arg=1
  for arg in "$@"
  do
    if [ "$is_next_currency" = "true" ]; then
      #echo "$curr_arg"
      curr_arg=`expr $curr_arg + 1` # TODO: find out how to do arithmetics and select argument by variable
      if [[ "$curr_selector"==".*" ]]; then
        curr_selector="[a-zA-Z _ \\. \\-]*\\;[0-9 : \\s \\-]*;$arg\\;"
        else
        curr_selector="$curr_selector|[a-zA-Z _ \\. \\-]*\\;[0-9 : \\s \\-]*;$arg\\;"
      fi
      is_next_currency="false"
    fi
    if [ "$arg" = "-c" ]; then
      curr_arg=`expr $curr_arg + 1`
      is_next_currency="true"
    fi
  done
  #if [[ ! -z "${curr_selector+x}" ]]; then
  #  curr_selector="$curr_selector)"
  #fi

  is_prev_date="false"
for arg in "$@"
do
  if [ "$is_prev_date" = "true" ]; then
    previous_date="$arg"
    is_prev_date="false"
      curr_arg=`expr $curr_arg + 1`
    
  fi
  if [ "$arg" = "-b" ]; then
    is_prev_date="true"
      curr_arg=`expr $curr_arg + 1`
  fi
done

  is_past_date="false"
for arg in "$@"
do
  if [ "$is_past_date" = "true" ]; then
    past_date="$arg"
    is_past_date="false"
      curr_arg=`expr $curr_arg + 1`
    
  fi
  if [ "$arg" = "-a" ]; then
    is_past_date="true"
      curr_arg=`expr $curr_arg + 1`
  fi
done

# Check if a file name is provided as an argument
if [ $# -le 1 ]; then
  #echo "Please specify a file name as an argument."
  exit 1
fi




if [[ ($arg_count -eq 1 && ("$1" == "--help" || "$1" == '-h')) || $arg_count -le 1 ]]; then
  echo "usecase: $0 [-h|--help] [FILTER] [COMMAND] USER LOG"
  exit 0
fi



if [[ ("${!curr_arg}" == "list-currency")]]; then
  #unzipped=$(gunzip -c $3)
  #if [[ $? -ne 0 ]]; then
   # unzipped=$(cat $3)
  #fi
  trader_username=`expr $curr_arg + 1`
  file_data=$(read_multiple_files "$@")

  if [[ ! -z "${previous_date+x}" ]]; then
  #echo "$file_data"
     file_data=$( echo "$file_data" | awk -F ';' "{
   date = strftime(\$2,\"%Y-%m-%d %H:%M:%S\")
   if (date < strftime(\"$previous_date\",\"%Y-%m-%d %H:%M:%S\")){
     print
   }
 }" )
  fi


  if [[ ! -z "${past_date+x}" ]]; then
     file_data=$( echo "$file_data" | awk -F ';' "{
   date = strftime(\$2,\"%Y-%m-%d %H:%M:%S\")
   if (date > strftime(\"$past_date\",\"%Y-%m-%d %H:%M:%S\")){
     print
   }
 }" )
  fi


 # echo "$file_data"

  echo "$file_data"| grep "$curr_selector" | grep "^${!trader_username};*.;*.;*." | cut -d ';' -f3 | sort | uniq
  exit 0
fi


if [ "${!curr_arg}" = "list" ]; then
  #unzipped=$(gunzip -c ${*: -1})
  #if [[ $? -ne 0 ]]; then
   # unzipped=$(cat ${*: -1})
  #fi
  unzipped=$(read_multiple_files "$@")
  if [[ ! -z "${previous_date+x}" ]]; then
     unzipped=$( echo "$unzipped" | awk -F ';' "{
   date = strftime(\$2,\"%Y-%m-%d %H:%M:%S\")
   if (date < strftime(\"$previous_date\",\"%Y-%m-%d %H:%M:%S\")){
     print
   }
 }" )
  fi
  if [[ ! -z "${past_date+x}" ]]; then
     unzipped=$( echo "$unzipped" | awk -F ';' "{
   date = strftime(\$2,\"%Y-%m-%d %H:%M:%S\")
   if (date > strftime(\"$past_date\",\"%Y-%m-%d %H:%M:%S\")){
     print
   }
 }" )
  fi
  #echo "$unzipped"
 trader_username=`expr $curr_arg + 1` 
 echo "$unzipped" | grep "${!trader_username};" | grep "$curr_selector"
 exit 0
fi

if [ "${!curr_arg}" = "status" ]; then
  #unzipped=$(gunzip -c ${*: -1})
  #if [[ $? -ne 0 ]]; then
  #  unzipped=$(cat ${*: -1})
    #echo "$unzipped"
  #fi

  unzipped=$(read_multiple_files "$@")
  if [[ ! -z "${previous_date+x}" ]]; then
     unzipped=$( echo "$unzipped" | awk -F ';' "{
   date = strftime(\$2,\"%Y-%m-%d %H:%M:%S\")
   if (date < strftime(\"$previous_date\",\"%Y-%m-%d %H:%M:%S\")){
     print
   }
 }" )
  fi
  if [[ ! -z "${past_date+x}" ]]; then
     unzipped=$( echo "$unzipped" | awk -F ';' "{
   date = strftime(\$2,\"%Y-%m-%d %H:%M:%S\")
   if (date > strftime(\"$past_date\",\"%Y-%m-%d %H:%M:%S\")){
     print
   }
 }" )
  fi

  user_name_par_num=`expr $curr_arg + 1`
  echo "$unzipped" | grep "${!user_name_par_num}" | grep "$curr_selector"| awk -F ';' '{currencies[$3]+=$4} END {for (currency in currencies) printf("%s : %.4f\n", currency, currencies[currency])}' | sort
  exit 0
  
fi

#echo "$curr_arg"
#echo "${!curr_arg}"

if [ "${!curr_arg}" = "profit"  ]; then #Hacky solution
  #tradername=unqote "$2"
  #echo "$XTF_PROFIT"
  #unzipped=$(gunzip -c ${*: -1})
  #if [[ $? -ne 0 ]]; then
  #  unzipped=$(cat ${*: -1})
  #fi
  #echo "$@"
  unzipped=$(read_multiple_files "$@")
  if [[ -z "${XTF_PROFIT+x}" ]]; then
  # XTF_PROFIT is set
  XTF_PROFIT=0
fi
 # read_file ${*:-1}
  #echo "${@: -1}"
  user_name_par_num=`expr $curr_arg + 1`
  #echo "${!arg_loc}"

  if [[ ! -z "${previous_date+x}" ]]; then
     unzipped=$( echo "$unzipped" | awk -F ';' "{
   date = strftime(\$2,\"%Y-%m-%d %H:%M:%S\")
   if (date < strftime(\"$previous_date\",\"%Y-%m-%d %H:%M:%S\")){
     print
   }
 }" )
  fi



  if [[ ! -z "${past_date+x}" ]]; then
     unzipped=$( echo "$unzipped" | awk -F ';' "{
   date = strftime(\$2,\"%Y-%m-%d %H:%M:%S\")
   if (date > strftime(\"$past_date\",\"%Y-%m-%d %H:%M:%S\")){
     print
   }
 }" )
  fi


  echo "$unzipped"| grep "${!user_name_par_num}"| grep "$curr_selector" | awk -F ';' "{currencies[\$3]+=\$4} END {for (currency in currencies){ if(currencies[currency]<0)
  { printf(\"%s : %.4f\n\", currency, currencies[currency])}
else 
  {printf(\"%s : %.4f\n\", currency, (currencies[currency]+(currencies[currency]*($XTF_PROFIT/100))))}}}" | sort
  exit 0
  
fi



# Fallback basically same as `list`
#if [ "${!curr_arg}" = "list" ]; then
  unzipped=$(read_multiple_files "$@")
  if [[ ! -z "${previous_date+x}" ]]; then
     unzipped=$( echo "$unzipped" | awk -F ';' "{
   date = strftime(\$2,\"%Y-%m-%d %H:%M:%S\")
   if (date < strftime(\"$previous_date\",\"%Y-%m-%d %H:%M:%S\")){
     print
   }
 }" )
  fi
  if [[ ! -z "${past_date+x}" ]]; then
     unzipped=$( echo "$unzipped" | awk -F ';' "{
   date = strftime(\$2,\"%Y-%m-%d %H:%M:%S\")
   if (date > strftime(\"$past_date\",\"%Y-%m-%d %H:%M:%S\")){
     print
   }
 }" )
  fi
  #echo "$unzipped"
 echo "$unzipped" | grep "$1;" | grep "$curr_selector"
 exit 0
#fi


#What the hell is going on here????
if [[ ($arg_count -le 2) ]]; then
 cat "$2" | grep "$1;" | sort r 
 exit 0
fi
